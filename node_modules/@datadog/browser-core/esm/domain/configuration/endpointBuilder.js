import { timeStampNow } from '../../tools/timeUtils';
import { normalizeUrl } from '../../tools/urlPolyfill';
import { generateUUID } from '../../tools/utils';
import { INTAKE_SITE_US1 } from './intakeSites';
export var ENDPOINTS = {
    logs: 'logs',
    rum: 'rum',
    sessionReplay: 'session-replay',
};
var INTAKE_TRACKS = {
    logs: 'logs',
    rum: 'rum',
    sessionReplay: 'replay',
};
export function createEndpointBuilder(initConfiguration, endpointType, configurationTags) {
    var clientToken = initConfiguration.clientToken;
    var host = buildEndpointHost(initConfiguration, endpointType);
    var baseUrl = "https://".concat(host, "/api/v2/").concat(INTAKE_TRACKS[endpointType]);
    var proxyUrl = initConfiguration.proxyUrl && normalizeUrl(initConfiguration.proxyUrl);
    return {
        build: function (api, retry) {
            var tags = ["sdk_version:".concat("4.30.1"), "api:".concat(api)].concat(configurationTags);
            if (retry) {
                tags.push("retry_count:".concat(retry.count), "retry_after:".concat(retry.lastFailureStatus));
            }
            var parameters = [
                'ddsource=browser',
                "ddtags=".concat(encodeURIComponent(tags.join(','))),
                "dd-api-key=".concat(clientToken),
                "dd-evp-origin-version=".concat(encodeURIComponent("4.30.1")),
                'dd-evp-origin=browser',
                "dd-request-id=".concat(generateUUID()),
            ];
            if (endpointType === 'rum') {
                parameters.push("batch_time=".concat(timeStampNow()));
            }
            if (initConfiguration.internalAnalyticsSubdomain) {
                parameters.reverse();
            }
            var endpointUrl = "".concat(baseUrl, "?").concat(parameters.join('&'));
            return proxyUrl ? "".concat(proxyUrl, "?ddforward=").concat(encodeURIComponent(endpointUrl)) : endpointUrl;
        },
        buildIntakeUrl: function () {
            return proxyUrl ? "".concat(proxyUrl, "?ddforward") : baseUrl;
        },
        endpointType: endpointType,
    };
}
function buildEndpointHost(initConfiguration, endpointType) {
    var _a = initConfiguration.site, site = _a === void 0 ? INTAKE_SITE_US1 : _a, internalAnalyticsSubdomain = initConfiguration.internalAnalyticsSubdomain;
    if (internalAnalyticsSubdomain && site === INTAKE_SITE_US1) {
        return "".concat(internalAnalyticsSubdomain, ".").concat(INTAKE_SITE_US1);
    }
    var domainParts = site.split('.');
    var extension = domainParts.pop();
    return "".concat(ENDPOINTS[endpointType], ".browser-intake-").concat(domainParts.join('-'), ".").concat(extension);
}
//# sourceMappingURL=endpointBuilder.js.map