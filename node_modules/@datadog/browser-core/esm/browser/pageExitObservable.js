import { Observable } from '../tools/observable';
import { addEventListener } from './addEventListener';
export function createPageExitObservable() {
    var observable = new Observable(function () {
        /**
         * Only event that guarantee to fire on mobile devices when the page transitions to background state
         * (e.g. when user switches to a different application, goes to homescreen, etc), or is being unloaded.
         */
        var stopVisibilityChangeListener = addEventListener(document, "visibilitychange" /* VISIBILITY_CHANGE */, function () {
            if (document.visibilityState === 'hidden') {
                observable.notify({ reason: "visibility_hidden" /* HIDDEN */ });
            }
        }, { capture: true }).stop;
        /**
         * Safari does not support yet to send a request during:
         * - a visibility change during doc unload (cf: https://bugs.webkit.org/show_bug.cgi?id=194897)
         * - a page hide transition (cf: https://bugs.webkit.org/show_bug.cgi?id=188329)
         */
        var stopBeforeUnloadListener = addEventListener(window, "beforeunload" /* BEFORE_UNLOAD */, function () {
            observable.notify({ reason: "before_unload" /* UNLOADING */ });
        }).stop;
        return function () {
            stopVisibilityChangeListener();
            stopBeforeUnloadListener();
        };
    });
    return observable;
}
//# sourceMappingURL=pageExitObservable.js.map