"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startFeatureFlagContexts = exports.FEATURE_FLAG_CONTEXT_TIME_OUT_DELAY = void 0;
var browser_core_1 = require("@datadog/browser-core");
exports.FEATURE_FLAG_CONTEXT_TIME_OUT_DELAY = browser_core_1.SESSION_TIME_OUT_DELAY;
/**
 * Start feature flag contexts
 *
 * Feature flag contexts follow the life of views.
 * A new context is added when a view is created and ended when the view is ended
 *
 * Note: we choose not to add a new context at each evaluation to save memory
 */
function startFeatureFlagContexts(lifeCycle) {
    if (!(0, browser_core_1.isExperimentalFeatureEnabled)('feature_flags')) {
        return {
            findFeatureFlagEvaluations: function () { return undefined; },
            addFeatureFlagEvaluation: browser_core_1.noop,
        };
    }
    var featureFlagContexts = new browser_core_1.ContextHistory(exports.FEATURE_FLAG_CONTEXT_TIME_OUT_DELAY);
    lifeCycle.subscribe(4 /* VIEW_ENDED */, function (_a) {
        var endClocks = _a.endClocks;
        featureFlagContexts.closeActive(endClocks.relative);
    });
    lifeCycle.subscribe(2 /* VIEW_CREATED */, function (_a) {
        var startClocks = _a.startClocks;
        featureFlagContexts.add({}, startClocks.relative);
    });
    return {
        findFeatureFlagEvaluations: function (startTime) { return featureFlagContexts.find(startTime); },
        addFeatureFlagEvaluation: function (key, value) {
            var currentContext = featureFlagContexts.find();
            if (currentContext) {
                currentContext[key] = (0, browser_core_1.deepClone)(value);
            }
        },
    };
}
exports.startFeatureFlagContexts = startFeatureFlagContexts;
//# sourceMappingURL=featureFlagContext.js.map