import { ImportDeclaration, ImportSpecifier, ImportDefaultSpecifier, JSXAttribute, CallExpression, VariableDeclarator } from '@babel/types';
import { NodePath } from '@babel/core';
import { Binding } from '@babel/traverse';
import { Babel } from '..';
/**
 * Check if the node path is an import statement
 *
 * @param {NodePath} path
 * @returns {boolean}
 */
export declare const isImport: (path: NodePath) => boolean;
/**
 * Check if the import statement belongs to the specified package
 *
 * @param {ImportDeclaration} node
 * @param {string} packageName
 * @returns {boolean}
 */
export declare const isImportedFromPackage: (node: ImportDeclaration, packageName: string) => boolean;
/**
 * Get the original export name of an import statement
 *
 * @param {ImportSpecifier | ImportDefaultSpecifier} node
 * @returns {string}
 */
export declare const getExportName: (node: ImportSpecifier | ImportDefaultSpecifier) => string;
/**
 * Get all arguments of a require call.
 * If it references a variable from an import statement, it converts it to require arguments.
 *
 * @param {Babel['types']} types
 * @param {NodePath<JSXAttribute>} path
 * @returns {CallExpression['arguments'] | undefined}
 */
export declare const getRequireArguments: (types: Babel['types'], path: NodePath<JSXAttribute>) => CallExpression['arguments'] | undefined;
/**
 * Returns the relevant string of a require or import statement
 *
 * @param {Babel['types]} types
 * @param {NodePath<JSXAttribute>} path
 * @returns {string}
 */
export declare const getRelevantRequireString: (types: Babel['types'], path: NodePath<JSXAttribute>) => string | undefined;
/**
 * Get the imported export name
 *
 * @param {VariableDeclarator} node
 * @param {Binding} binding
 * @returns {string | undefined}
 */
export declare const resolveRequireExportName: (node: VariableDeclarator, binding: Binding) => string | undefined;
/**
 * Gets the module name of a require call
 *
 * @param {CallExpression} node
 * @returns {string | undefined}
 */
export declare const resolveRequireModule: (node: CallExpression) => string | undefined;
